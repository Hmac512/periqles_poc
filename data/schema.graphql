type Query {
  device: Device

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Device {
  """The ID of an object"""
  id: ID!
  deviceId: String!
  deviceName: String!
  description: String!
  cost: Float!
  oem: OrgEnum!
  badges: BadgeEnum!
  functions: FunctionEnum!
}

enum OrgEnum {
  GeekPlus
  OTTO
  Samsung
}

enum BadgeEnum {
  Robot
  Storage
  Vehicle
}

enum FunctionEnum {
  AMR_WAREHOUSE
  WAREHOUSE_OF_FUTURE
  STORAGE
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Mutation {
  addDevice(input: AddDeviceInput!): AddDevicePayload
}

type AddDevicePayload {
  deviceId: String!
  deviceName: String!
  description: String!
  cost: String!
  oem: OrgEnum!
  badges: BadgeEnum!
  functions: FunctionEnum!
  clientMutationId: String
}

input AddDeviceInput {
  deviceName: String!
  description: String!
  cost: String!
  oem: OrgEnum!
  badges: BadgeEnum!
  functions: FunctionEnum!
  clientMutationId: String
}
